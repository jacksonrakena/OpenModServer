@page
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using OpenModServer.Areas.Games
@using OpenModServer.Areas.Games.Builtin
@using OpenModServer.Areas.Games.Capabilities
@model OpenModServer.Areas.Mods.Pages.CreateMod
@inject GameManager GameManager

<div>
    <h3>Create a new mod for @Model.Game.Name</h3>
    <div>
        This form will create a new mod.
        <br />
        <br />
        To upload files, you will need to create a new release in your newly-created mod.
    </div>
    <form method="post">
        <div asp-validation-summary="All" class="text-danger"></div>
        <div class="mb-3">
            <label asp-for="DataModel.Name" class="form-label"></label>
            <input asp-for="DataModel.Name" class="form-control"/>
            <span asp-validation-for="DataModel.Name" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="DataModel.Tagline" class="form-label"></label>
            <input asp-for="DataModel.Tagline" class="form-control"/>
            <span asp-validation-for="DataModel.Tagline" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="DataModel.Description" class="form-label"></label>
            <textarea asp-for="DataModel.Description" class="form-control"></textarea>
            <span asp-validation-for="DataModel.Description" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="DataModel.Tags" class="form-label"></label>
            <input asp-for="DataModel.Tags" class="form-control"></input>
            <span asp-validation-for="DataModel.Tags" class="text-danger"></span>
        </div>
        @if (Model.MetadataFields != null)
        {
            <div class="card border-dark mb-3">
                <div class="card-header">Additional information required</div>
                <div class="card-body text-dark">
                    <p class="card-text">Mods submitted for @Model.Game.Name require more information.</p>
                    @foreach (var prop in Model.MetadataFields.Fields)
                    {
                        <div class="mb-3">
                            @if (prop.Value.HelperText != null)
                            {
                                <p class="text-muted">@prop.Value.HelperText</p>     
                            }
                            @switch (prop.Value.FieldType)
                            {
                                case MetadataFieldType.SingleLineText:
                                    <label class="form-label">@prop.Value.Name</label>
                                    <input name="@prop.Key" id="@prop.Key" for="@prop.Key" class="form-control" type="text" placeholder="@prop.Value.Placeholder"/>
                                    break;
                                case MetadataFieldType.Boolean:
                                    <input name="@prop.Key" id="@prop.Key" class="form-check-input" type="checkbox"/>
                                    <label for="@prop.Key" class="form-check-label">@prop.Value.Name</label>
                                    break;
                                default:
                                    throw new ArgumentOutOfRangeException();
                            }
                        </div>
                    }
                </div>
            </div>
        }
        <div class="mb-3">
            <input type="submit" value="Create" class="btn btn-primary"/>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}